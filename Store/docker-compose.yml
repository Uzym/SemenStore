version: '3.7'

services:
  store_db:
    image: postgres
    volumes:
      - db_volume:/var/lib/postgresql/data
      - ./storeDB/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "store"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d store" ]
      interval: 2s
      timeout: 2s
      retries: 20
    networks:
      - store_network

  store_api:
    image: store/api
    build:
      context: .
      dockerfile: storeAPI/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      DB_CONNECTION_STRING: ${STORE_DB_CONNECTION_STRING}
    depends_on:
      store_db:
        condition: service_healthy
    ports:
      - '8000:80'
      - '443:443'
    networks:
      - store_network

  store_frontend:
    image: store/frontend
    build:
      context: StoreFrontend
    # environment:
    ports:
      - "5173:5173"
    volumes:
      - staticbuild:/app/out
    networks:
      - store_network
    depends_on:
      - store_api

  # minio:
  #   container_name: minio
  #   image: minio/minio
  #   volumes:
  #     - minio_volume:/data
  #   ports:
  #     - "9000:9000"
  #   command: server /data
  #   networks:
  #     - store_network
  #   restart: on-failure

  # s3_api:
  #   image: s3/api
  #   depends_on:
  #     - minio
  #   environment:
  #     ASPNETCORE_ENVIRONMENT: "Development"
  #   ports:
  #     - '8002:80'
  #     - '443:443'
  #   networks:
  #     - store_network

volumes:
  db_volume:
  minio_volume:
  staticbuild:

networks:
  store_network:
    driver: bridge