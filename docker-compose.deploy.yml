version: '3.7' 

services:
  taskmgr_db:
    image: postgres
    volumes:
      - taskmgr_db_volume:/var/lib/postgresql/data
      - ./TaskMgr/TaskMgrDB/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "taskmgr"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d taskmgr" ]
      interval: 2s
      timeout: 2s
      retries: 20
    networks:
      - network

  taskmgr_api:
    image: taskmgr/api
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      DB_CONNECTION_STRING: ${TASKMGR_DB_CONNECTION_STRING}
    depends_on:
      taskmgr_db:
        condition: service_healthy
    ports:
      - '8000:80'
      - '443:443'
    networks:
      - network

  taskmgr_tgbot:
    image: taskmgr/tgbot
    restart: always
    build:
      context: ./TaskMgrTgBot
    environment:
      - TOKEN=${TASKMGR_TOKEN}
      - API_URL=${TASKMGR_API_URL}
    depends_on:
      - taskmgr_api
    networks:
      - network

  store_db:
    image: postgres
    volumes:
      - store_db_volume:/var/lib/postgresql/data
      - ./Store/StoreDB/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "store"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d store" ]
      interval: 2s
      timeout: 2s
      retries: 20
    networks:
      - network

  store_api:
    image: store/api
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      DB_CONNECTION_STRING: ${STORE_DB_CONNECTION_STRING}
      TASKMGR_API_URL: ${TASKMGR_API_URL}
    depends_on:
      store_db:
        condition: service_healthy
    ports:
      - '8001:80'
      - '444:443'
    networks:
      - network

  store_tgbot:
    image: store/tgbot
    environment:
      - TOKEN=${STORE_TOKEN}
      - API_URL=${STORE_API_URL}
      - S3_API_URL=${S3_API_URL}
    depends_on:
      - store_api
    networks:
      - network
    restart: always

  store_frontend:
    image: store/frontend
    # environment:
    volumes:
      - ./Store/StoreFrontend:/usr/app
    ports:
      - "5173:3000"
    depends_on:
      - store_api
    networks:
      - network

  minio:
    container_name: minio
    image: minio/minio
    volumes:
      - minio_volume:/data
    ports:
      - "9000:9000"
    command: server /data
    networks:
      - network
    restart: on-failure

  s3_api:
    image: s3/api
    depends_on:
      - minio
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
    ports:
      - '8002:80'
    networks:
      - network

volumes:
  taskmgr_db_volume:
  store_db_volume:
  minio_volume:
  # staticbuild:

networks:
  network:
    driver: bridge